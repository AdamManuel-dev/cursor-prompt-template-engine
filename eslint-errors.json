[{"filePath":"/Users/adammanuel/Projects/cursor-prompt-template-engine/src/commands/generate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/cursor-prompt-template-engine/src/commands/init.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/cursor-prompt-template-engine/src/commands/list.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/cursor-prompt-template-engine/src/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/cursor-prompt-template-engine/src/types/index.ts","messages":[{"ruleId":"no-use-before-define","severity":2,"message":"'TemplateType' was used before it was defined.","line":20,"column":9,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":20,"endColumn":21},{"ruleId":"no-use-before-define","severity":2,"message":"'TemplateFile' was used before it was defined.","line":21,"column":10,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":21,"endColumn":22},{"ruleId":"no-use-before-define","severity":2,"message":"'TemplateVariable' was used before it was defined.","line":22,"column":30,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":22,"endColumn":46},{"ruleId":"no-use-before-define","severity":2,"message":"'TemplateHooks' was used before it was defined.","line":23,"column":11,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":23,"endColumn":24},{"ruleId":"no-use-before-define","severity":2,"message":"'OutputFormat' was used before it was defined.","line":82,"column":12,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":82,"endColumn":24},{"ruleId":"no-use-before-define","severity":2,"message":"'ValidationError' was used before it was defined.","line":136,"column":11,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":136,"endColumn":26},{"ruleId":"no-use-before-define","severity":2,"message":"'ValidationWarning' was used before it was defined.","line":137,"column":13,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":137,"endColumn":30}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @fileoverview Type definitions for cursor-prompt-template-engine\n * @lastmodified 2025-08-22T10:30:00Z\n *\n * Features: Core type definitions for CLI and template system\n * Main Types: TemplateConfig, CLIOptions, TemplateMetadata\n * Constraints: Strict TypeScript typing, no any types\n * Patterns: Interface-based design with clear separation of concerns\n */\n\n/**\n * Configuration for a prompt template\n */\nexport interface TemplateConfig {\n  name: string;\n  version: string;\n  description: string;\n  author?: string;\n  tags?: string[];\n  type: TemplateType;\n  files: TemplateFile[];\n  variables?: Record<string, TemplateVariable>;\n  hooks?: TemplateHooks;\n  dependencies?: string[];\n}\n\n/**\n * Types of templates supported\n */\nexport type TemplateType =\n  | 'basic'\n  | 'advanced'\n  | 'component'\n  | 'project'\n  | 'snippet';\n\n/**\n * Template file definition\n */\nexport interface TemplateFile {\n  source: string;\n  destination: string;\n  transform?: boolean;\n  condition?: string;\n  permissions?: string;\n}\n\n/**\n * Template variable definition\n */\nexport interface TemplateVariable {\n  type: 'string' | 'number' | 'boolean' | 'choice';\n  description: string;\n  default?: unknown;\n  required?: boolean;\n  choices?: string[];\n  validation?: string;\n}\n\n/**\n * Template lifecycle hooks\n */\nexport interface TemplateHooks {\n  preApply?: string[];\n  postApply?: string[];\n  preValidate?: string[];\n  postValidate?: string[];\n}\n\n/**\n * CLI command options\n */\nexport interface CLIOptions {\n  debug?: boolean;\n  config?: string;\n  dryRun?: boolean;\n  force?: boolean;\n  preview?: boolean;\n  strict?: boolean;\n  global?: boolean;\n  all?: boolean;\n  format?: OutputFormat;\n}\n\n/**\n * Output format options\n */\nexport type OutputFormat = 'table' | 'json' | 'yaml' | 'plain';\n\n/**\n * Template metadata for listing and discovery\n */\nexport interface TemplateMetadata {\n  id: string;\n  name: string;\n  description: string;\n  version: string;\n  author?: string;\n  tags: string[];\n  type: TemplateType;\n  path: string;\n  lastModified: Date;\n  size: number;\n}\n\n/**\n * Application configuration\n */\nexport interface AppConfig {\n  templatesDir: string;\n  globalTemplatesDir?: string;\n  defaultTemplate: string;\n  outputFormat: OutputFormat;\n  enableDebug: boolean;\n  validateOnApply: boolean;\n  backupBeforeApply: boolean;\n}\n\n/**\n * Template application result\n */\nexport interface ApplyResult {\n  success: boolean;\n  filesCreated: string[];\n  filesModified: string[];\n  filesSkipped: string[];\n  errors: string[];\n  warnings: string[];\n}\n\n/**\n * Validation result\n */\nexport interface ValidationResult {\n  valid: boolean;\n  errors: ValidationError[];\n  warnings: ValidationWarning[];\n}\n\n/**\n * Validation error\n */\nexport interface ValidationError {\n  code: string;\n  message: string;\n  file?: string;\n  line?: number;\n  column?: number;\n}\n\n/**\n * Validation warning\n */\nexport interface ValidationWarning {\n  code: string;\n  message: string;\n  file?: string;\n  suggestion?: string;\n}\n\n/**\n * Template processing options\n */\nexport interface ProcessingOptions {\n  variables?: Record<string, string>;\n  preview?: boolean;\n  validate?: boolean;\n  stripComments?: boolean;\n  preserveWhitespace?: boolean;\n}\n\n/**\n * Template discovery options\n */\nexport interface DiscoveryOptions {\n  searchPaths?: string[];\n  includeHidden?: boolean;\n  recursive?: boolean;\n  fileExtensions?: string[];\n  categories?: string[];\n}\n\n/**\n * Command execution context\n */\nexport interface CommandContext {\n  workingDirectory: string;\n  configPath?: string;\n  debug: boolean;\n  dryRun: boolean;\n  interactive: boolean;\n}\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/cursor-prompt-template-engine/src/utils/config.ts","messages":[{"ruleId":"no-use-before-define","severity":2,"message":"'findConfigFile' was used before it was defined.","line":95,"column":49,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":95,"endColumn":63},{"ruleId":"no-use-before-define","severity":2,"message":"'validateConfig' was used before it was defined.","line":103,"column":13,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":103,"endColumn":27},{"ruleId":"no-use-before-define","severity":2,"message":"'mergeConfig' was used before it was defined.","line":106,"column":16,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":106,"endColumn":27},{"ruleId":"no-use-before-define","severity":2,"message":"'applyEnvironmentOverrides' was used before it was defined.","line":114,"column":14,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":114,"endColumn":39},{"ruleId":"no-use-before-define","severity":2,"message":"'resolveConfigPaths' was used before it was defined.","line":117,"column":14,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":117,"endColumn":32},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":152,"column":9,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":152,"endColumn":36},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to property of function parameter 'config'.","line":179,"column":5,"nodeType":"Identifier","messageId":"assignmentToFunctionParamProp","endLine":179,"endColumn":11},{"ruleId":"no-use-before-define","severity":2,"message":"'validateConfig' was used before it was defined.","line":182,"column":11,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":182,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":223,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":223,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5481,5484],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5481,5484],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":273,"column":5,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":280,"endColumn":6},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":297,"column":3,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":313,"endColumn":4},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":299,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":299,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7606,7609],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7606,7609],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":307,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":307,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7800,7803],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7800,7803],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":310,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":310,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7929,7932],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7929,7932],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":430,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":430,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10884,10887],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10884,10887],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[{"ruleId":"no-constant-condition","severity":1,"message":"Unexpected constant condition.","line":146,"column":10,"nodeType":"Literal","messageId":"unexpected","endLine":146,"endColumn":14,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":148,"column":5,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":157,"endColumn":6,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":10,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @fileoverview Configuration management for cursor-prompt-template-engine\n * @lastmodified 2025-08-22T10:54:00Z\n *\n * Features: Configuration loading, validation, and defaults\n * Main APIs: loadConfig(), writeConfig(), createDefaultConfig()\n * Constraints: JSON-based configuration with schema validation\n * Patterns: Configuration hierarchy, environment overrides, validation\n */\n\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\nimport { logger } from './logger';\nimport { ConfigError, ValidationError } from './errors';\n\n/**\n * Main configuration interface\n */\nexport interface Config {\n  projectName: string;\n  templatePaths: string[];\n  outputPath?: string;\n  defaultTemplate?: string;\n  variables: Record<string, string>;\n  formats: {\n    default: 'markdown' | 'plain' | 'json';\n    supported: string[];\n  };\n  features: {\n    clipboard: boolean;\n    preview: boolean;\n    validation: boolean;\n    autoBackup: boolean;\n  };\n  metadata: {\n    version: string;\n    created: string;\n    lastModified: string;\n  };\n}\n\n/**\n * Configuration creation options\n */\nexport interface ConfigOptions {\n  projectName?: string;\n  templateType?: string;\n  templatePaths?: string[];\n  outputPath?: string;\n}\n\n/**\n * Default configuration values\n */\nconst DEFAULT_CONFIG: Config = {\n  projectName: 'cursor-prompt-templates',\n  templatePaths: ['./templates', './.cursor-prompt/templates'],\n  outputPath: './generated',\n  defaultTemplate: 'basic',\n  variables: {},\n  formats: {\n    default: 'markdown',\n    supported: ['markdown', 'plain', 'json'],\n  },\n  features: {\n    clipboard: true,\n    preview: true,\n    validation: true,\n    autoBackup: false,\n  },\n  metadata: {\n    version: '1.0.0',\n    created: new Date().toISOString(),\n    lastModified: new Date().toISOString(),\n  },\n};\n\n/**\n * Configuration file names in order of priority\n */\nconst CONFIG_FILE_NAMES = [\n  '.cursor-prompt.config.json',\n  '.cursor-prompt.json',\n  'cursor-prompt.config.json',\n  '.cursorprompt.json',\n];\n\n/**\n * Load configuration from file system\n */\nexport async function loadConfig(configPath?: string): Promise<Config> {\n  let config = { ...DEFAULT_CONFIG };\n\n  try {\n    const configFilePath = configPath || (await findConfigFile());\n\n    if (configFilePath) {\n      logger.debug(`Loading config from: ${configFilePath}`);\n      const fileContent = await fs.readFile(configFilePath, 'utf-8');\n      const parsedConfig = JSON.parse(fileContent);\n\n      // Validate configuration\n      await validateConfig(parsedConfig);\n\n      // Merge with defaults\n      config = mergeConfig(config, parsedConfig);\n\n      logger.debug('Configuration loaded successfully');\n    } else {\n      logger.debug('No config file found, using defaults');\n    }\n\n    // Apply environment overrides\n    config = applyEnvironmentOverrides(config);\n\n    // Resolve relative paths\n    config = resolveConfigPaths(config, configFilePath);\n\n    return config;\n  } catch (error) {\n    if (error instanceof ConfigError) {\n      throw error;\n    } else if (error instanceof SyntaxError) {\n      throw new ConfigError(\n        `Invalid JSON in configuration file: ${error.message}`,\n        'CONFIG_PARSE_ERROR'\n      );\n    } else {\n      throw new ConfigError(\n        `Failed to load configuration: ${error}`,\n        'CONFIG_LOAD_ERROR'\n      );\n    }\n  }\n}\n\n/**\n * Find configuration file in current directory and parents\n */\nasync function findConfigFile(\n  startDir: string = process.cwd()\n): Promise<string | null> {\n  let currentDir = startDir;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    // eslint-disable-next-line no-restricted-syntax\n    for (const fileName of CONFIG_FILE_NAMES) {\n      const configPath = path.join(currentDir, fileName);\n\n      try {\n        await fs.access(configPath);\n        return configPath;\n      } catch {\n        // File doesn't exist, continue searching\n      }\n    }\n\n    const parentDir = path.dirname(currentDir);\n    if (parentDir === currentDir) {\n      // Reached root directory\n      break;\n    }\n    currentDir = parentDir;\n  }\n\n  return null;\n}\n\n/**\n * Write configuration to file\n */\nexport async function writeConfig(\n  configPath: string,\n  config: Config\n): Promise<void> {\n  try {\n    // Update metadata\n    config.metadata.lastModified = new Date().toISOString();\n\n    // Validate before writing\n    await validateConfig(config);\n\n    // Ensure directory exists\n    const configDir = path.dirname(configPath);\n    await fs.mkdir(configDir, { recursive: true });\n\n    // Write configuration\n    const configJson = JSON.stringify(config, null, 2);\n    await fs.writeFile(configPath, configJson);\n\n    logger.debug(`Configuration written to: ${configPath}`);\n  } catch (error) {\n    throw new ConfigError(\n      `Failed to write configuration: ${error}`,\n      'CONFIG_WRITE_ERROR'\n    );\n  }\n}\n\n/**\n * Create default configuration with overrides\n */\nexport function createDefaultConfig(options: ConfigOptions = {}): Config {\n  const config: Config = {\n    ...DEFAULT_CONFIG,\n    projectName: options.projectName || DEFAULT_CONFIG.projectName,\n    templatePaths: options.templatePaths || [...DEFAULT_CONFIG.templatePaths],\n    outputPath: options.outputPath || DEFAULT_CONFIG.outputPath,\n    metadata: {\n      ...DEFAULT_CONFIG.metadata,\n      created: new Date().toISOString(),\n      lastModified: new Date().toISOString(),\n    },\n  };\n\n  return config;\n}\n\n/**\n * Validate configuration object\n */\nasync function validateConfig(config: any): Promise<void> {\n  const errors: string[] = [];\n\n  // Required fields\n  if (!config.projectName || typeof config.projectName !== 'string') {\n    errors.push('projectName must be a non-empty string');\n  }\n\n  if (!Array.isArray(config.templatePaths)) {\n    errors.push('templatePaths must be an array');\n  } else if (config.templatePaths.length === 0) {\n    errors.push('templatePaths must contain at least one path');\n  }\n\n  // Optional fields with type validation\n  if (\n    config.outputPath !== undefined &&\n    typeof config.outputPath !== 'string'\n  ) {\n    errors.push('outputPath must be a string');\n  }\n\n  if (\n    config.defaultTemplate !== undefined &&\n    typeof config.defaultTemplate !== 'string'\n  ) {\n    errors.push('defaultTemplate must be a string');\n  }\n\n  if (config.variables !== undefined && typeof config.variables !== 'object') {\n    errors.push('variables must be an object');\n  }\n\n  // Validate formats\n  if (config.formats) {\n    if (\n      config.formats.default &&\n      !['markdown', 'plain', 'json'].includes(config.formats.default)\n    ) {\n      errors.push('formats.default must be one of: markdown, plain, json');\n    }\n\n    if (config.formats.supported && !Array.isArray(config.formats.supported)) {\n      errors.push('formats.supported must be an array');\n    }\n  }\n\n  // Validate features\n  if (config.features) {\n    const featureKeys = ['clipboard', 'preview', 'validation', 'autoBackup'];\n    for (const key of featureKeys) {\n      if (\n        config.features[key] !== undefined &&\n        typeof config.features[key] !== 'boolean'\n      ) {\n        errors.push(`features.${key} must be a boolean`);\n      }\n    }\n  }\n\n  if (errors.length > 0) {\n    throw new ValidationError(\n      `Configuration validation failed: ${errors.join(', ')}`,\n      'CONFIG_VALIDATION_ERROR'\n    );\n  }\n}\n\n/**\n * Merge configuration objects with deep merge for nested objects\n */\nfunction mergeConfig(base: Config, override: Partial<Config>): Config {\n  const merged = { ...base };\n\n  for (const [key, value] of Object.entries(override)) {\n    if (key in merged) {\n      const baseValue = (merged as any)[key];\n\n      if (\n        typeof baseValue === 'object' &&\n        typeof value === 'object' &&\n        !Array.isArray(value)\n      ) {\n        // Deep merge for objects\n        (merged as any)[key] = { ...baseValue, ...value };\n      } else {\n        // Direct assignment for primitives and arrays\n        (merged as any)[key] = value;\n      }\n    }\n  }\n\n  return merged;\n}\n\n/**\n * Apply environment variable overrides\n */\nfunction applyEnvironmentOverrides(config: Config): Config {\n  const envConfig = { ...config };\n\n  // Project name override\n  if (process.env.CURSOR_PROMPT_PROJECT_NAME) {\n    envConfig.projectName = process.env.CURSOR_PROMPT_PROJECT_NAME;\n  }\n\n  // Template paths override\n  if (process.env.CURSOR_PROMPT_TEMPLATE_PATHS) {\n    envConfig.templatePaths =\n      process.env.CURSOR_PROMPT_TEMPLATE_PATHS.split(':');\n  }\n\n  // Output path override\n  if (process.env.CURSOR_PROMPT_OUTPUT_PATH) {\n    envConfig.outputPath = process.env.CURSOR_PROMPT_OUTPUT_PATH;\n  }\n\n  // Default template override\n  if (process.env.CURSOR_PROMPT_DEFAULT_TEMPLATE) {\n    envConfig.defaultTemplate = process.env.CURSOR_PROMPT_DEFAULT_TEMPLATE;\n  }\n\n  // Feature toggles\n  if (process.env.CURSOR_PROMPT_CLIPBOARD !== undefined) {\n    envConfig.features.clipboard =\n      process.env.CURSOR_PROMPT_CLIPBOARD === 'true';\n  }\n\n  if (process.env.CURSOR_PROMPT_PREVIEW !== undefined) {\n    envConfig.features.preview = process.env.CURSOR_PROMPT_PREVIEW === 'true';\n  }\n\n  if (process.env.CURSOR_PROMPT_VALIDATION !== undefined) {\n    envConfig.features.validation =\n      process.env.CURSOR_PROMPT_VALIDATION === 'true';\n  }\n\n  return envConfig;\n}\n\n/**\n * Resolve relative paths in configuration\n */\nfunction resolveConfigPaths(\n  config: Config,\n  configFilePath?: string | null\n): Config {\n  const resolvedConfig = { ...config };\n\n  // Get base directory for relative path resolution\n  const baseDir = configFilePath ? path.dirname(configFilePath) : process.cwd();\n\n  // Resolve template paths\n  resolvedConfig.templatePaths = config.templatePaths.map(templatePath => {\n    if (path.isAbsolute(templatePath)) {\n      return templatePath;\n    }\n    return path.resolve(baseDir, templatePath);\n  });\n\n  // Resolve output path\n  if (config.outputPath && !path.isAbsolute(config.outputPath)) {\n    resolvedConfig.outputPath = path.resolve(baseDir, config.outputPath);\n  }\n\n  return resolvedConfig;\n}\n\n/**\n * Get configuration file path (for writing)\n */\nexport async function getConfigFilePath(\n  preferredPath?: string\n): Promise<string> {\n  if (preferredPath) {\n    return preferredPath;\n  }\n\n  // Try to find existing config file\n  const existingConfig = await findConfigFile();\n  if (existingConfig) {\n    return existingConfig;\n  }\n\n  // Use default location\n  return path.join(process.cwd(), CONFIG_FILE_NAMES[0]);\n}\n\n/**\n * Check if configuration file exists\n */\nexport async function configExists(configPath?: string): Promise<boolean> {\n  try {\n    const configFilePath = configPath || (await findConfigFile());\n    if (configFilePath) {\n      await fs.access(configFilePath);\n      return true;\n    }\n    return false;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Get configuration summary for display\n */\nexport function getConfigSummary(config: Config): Record<string, any> {\n  return {\n    projectName: config.projectName,\n    templatePaths: config.templatePaths,\n    outputPath: config.outputPath,\n    defaultTemplate: config.defaultTemplate,\n    defaultFormat: config.formats.default,\n    featuresEnabled: Object.entries(config.features)\n      .filter(([, enabled]) => enabled)\n      .map(([feature]) => feature),\n    variableCount: Object.keys(config.variables).length,\n    version: config.metadata.version,\n    lastModified: config.metadata.lastModified,\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/cursor-prompt-template-engine/src/utils/errors.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[612,615],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[612,615],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"default-param-last","severity":2,"message":"Default parameters should be last.","line":24,"column":5,"nodeType":"AssignmentPattern","messageId":"shouldBeLast","endLine":24,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[764,767],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[764,767],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1180,1183],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1180,1183],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"default-param-last","severity":2,"message":"Default parameters should be last.","line":67,"column":5,"nodeType":"AssignmentPattern","messageId":"shouldBeLast","endLine":67,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":68,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1761,1764],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1761,1764],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"default-param-last","severity":2,"message":"Default parameters should be last.","line":83,"column":5,"nodeType":"AssignmentPattern","messageId":"shouldBeLast","endLine":83,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2107,2110],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2107,2110],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"default-param-last","severity":2,"message":"Default parameters should be last.","line":105,"column":5,"nodeType":"AssignmentPattern","messageId":"shouldBeLast","endLine":105,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2665,2668],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2665,2668],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3546,3549],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3546,3549],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"default-param-last","severity":2,"message":"Default parameters should be last.","line":157,"column":5,"nodeType":"AssignmentPattern","messageId":"shouldBeLast","endLine":157,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":159,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3703,3706],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3703,3706],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":161,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3766,3769],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3766,3769],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"default-param-last","severity":2,"message":"Default parameters should be last.","line":184,"column":5,"nodeType":"AssignmentPattern","messageId":"shouldBeLast","endLine":184,"endColumn":31},{"ruleId":"default-param-last","severity":2,"message":"Default parameters should be last.","line":185,"column":5,"nodeType":"AssignmentPattern","messageId":"shouldBeLast","endLine":185,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":186,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":186,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4253,4256],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4253,4256],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"default-param-last","severity":2,"message":"Default parameters should be last.","line":204,"column":5,"nodeType":"AssignmentPattern","messageId":"shouldBeLast","endLine":204,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":207,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":207,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4692,4695],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4692,4695],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"default-param-last","severity":2,"message":"Default parameters should be last.","line":230,"column":5,"nodeType":"AssignmentPattern","messageId":"shouldBeLast","endLine":230,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":233,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":233,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5203,5206],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5203,5206],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":253,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":253,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5540,5543],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5540,5543],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":260,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":260,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5711,5714],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5711,5714],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[{"ruleId":"max-classes-per-file","severity":2,"message":"File has too many classes (9). Maximum allowed is 1.","line":15,"column":1,"nodeType":"Program","messageId":"maximumExceeded","endLine":402,"endColumn":1,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":9,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable max-classes-per-file */\n/**\n * @fileoverview Custom error classes for cursor-prompt-template-engine\n * @lastmodified 2025-08-22T10:54:00Z\n *\n * Features: Structured error handling with error codes and context\n * Main APIs: TemplateEngineError, ConfigError, FileNotFoundError\n * Constraints: Extends built-in Error class for compatibility\n * Patterns: Error inheritance, error codes, structured error data\n */\n\n/**\n * Base error class for all template engine errors\n */\nexport class TemplateEngineError extends Error {\n  public readonly code: string;\n\n  public readonly context?: Record<string, any>;\n\n  public readonly timestamp: Date;\n\n  constructor(\n    message: string,\n    code: string = 'TEMPLATE_ENGINE_ERROR',\n    context?: Record<string, any>\n  ) {\n    super(message);\n    this.name = 'TemplateEngineError';\n    this.code = code;\n    this.context = context;\n    this.timestamp = new Date();\n\n    // Maintain proper stack trace for where our error was thrown\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, TemplateEngineError);\n    }\n  }\n\n  /**\n   * Convert error to JSON for logging/serialization\n   */\n  toJSON(): Record<string, any> {\n    return {\n      name: this.name,\n      message: this.message,\n      code: this.code,\n      context: this.context,\n      timestamp: this.timestamp.toISOString(),\n      stack: this.stack,\n    };\n  }\n\n  /**\n   * Create a user-friendly error message\n   */\n  toUserMessage(): string {\n    return `${this.message}${this.context ? ` (${JSON.stringify(this.context)})` : ''}`;\n  }\n}\n\n/**\n * Configuration-related errors\n */\nexport class ConfigError extends TemplateEngineError {\n  constructor(\n    message: string,\n    code: string = 'CONFIG_ERROR',\n    context?: Record<string, any>\n  ) {\n    super(message, code, context);\n    this.name = 'ConfigError';\n  }\n}\n\n/**\n * File system related errors\n */\nexport class FileNotFoundError extends TemplateEngineError {\n  public readonly filePath?: string;\n\n  constructor(\n    message: string,\n    code: string = 'FILE_NOT_FOUND',\n    filePath?: string,\n    context?: Record<string, any>\n  ) {\n    super(message, code, { ...context, filePath });\n    this.name = 'FileNotFoundError';\n    this.filePath = filePath;\n  }\n}\n\n/**\n * Template processing errors\n */\nexport class TemplateProcessingError extends TemplateEngineError {\n  public readonly templatePath?: string;\n\n  public readonly lineNumber?: number;\n\n  public readonly columnNumber?: number;\n\n  constructor(\n    message: string,\n    code: string = 'TEMPLATE_PROCESSING_ERROR',\n    templatePath?: string,\n    lineNumber?: number,\n    columnNumber?: number,\n    context?: Record<string, any>\n  ) {\n    super(message, code, {\n      ...context,\n      templatePath,\n      lineNumber,\n      columnNumber,\n    });\n    this.name = 'TemplateProcessingError';\n    this.templatePath = templatePath;\n    this.lineNumber = lineNumber;\n    this.columnNumber = columnNumber;\n  }\n\n  /**\n   * Create a detailed error message with location information\n   */\n  toUserMessage(): string {\n    let { message } = this;\n\n    if (this.templatePath) {\n      message += ` in template: ${this.templatePath}`;\n    }\n\n    if (this.lineNumber !== undefined) {\n      message += ` at line ${this.lineNumber}`;\n\n      if (this.columnNumber !== undefined) {\n        message += `, column ${this.columnNumber}`;\n      }\n    }\n\n    return message;\n  }\n}\n\n/**\n * Validation errors\n */\nexport class ValidationError extends TemplateEngineError {\n  public readonly field?: string;\n\n  public readonly value?: any;\n\n  public readonly validationRule?: string;\n\n  constructor(\n    message: string,\n    code: string = 'VALIDATION_ERROR',\n    field?: string,\n    value?: any,\n    validationRule?: string,\n    context?: Record<string, any>\n  ) {\n    super(message, code, {\n      ...context,\n      field,\n      value,\n      validationRule,\n    });\n    this.name = 'ValidationError';\n    this.field = field;\n    this.value = value;\n    this.validationRule = validationRule;\n  }\n}\n\n/**\n * CLI-specific errors\n */\nexport class CLIError extends TemplateEngineError {\n  public readonly exitCode: number;\n\n  constructor(\n    message: string,\n    code: string = 'CLI_ERROR',\n    exitCode: number = 1,\n    context?: Record<string, any>\n  ) {\n    super(message, code, { ...context, exitCode });\n    this.name = 'CLIError';\n    this.exitCode = exitCode;\n  }\n}\n\n/**\n * Network/API related errors\n */\nexport class NetworkError extends TemplateEngineError {\n  public readonly statusCode?: number;\n\n  public readonly url?: string;\n\n  constructor(\n    message: string,\n    code: string = 'NETWORK_ERROR',\n    statusCode?: number,\n    url?: string,\n    context?: Record<string, any>\n  ) {\n    super(message, code, {\n      ...context,\n      statusCode,\n      url,\n    });\n    this.name = 'NetworkError';\n    this.statusCode = statusCode;\n    this.url = url;\n  }\n}\n\n/**\n * Permission/access related errors\n */\nexport class PermissionError extends TemplateEngineError {\n  public readonly action?: string;\n\n  public readonly resource?: string;\n\n  constructor(\n    message: string,\n    code: string = 'PERMISSION_ERROR',\n    action?: string,\n    resource?: string,\n    context?: Record<string, any>\n  ) {\n    super(message, code, {\n      ...context,\n      action,\n      resource,\n    });\n    this.name = 'PermissionError';\n    this.action = action;\n    this.resource = resource;\n  }\n}\n\n/**\n * Error utilities\n */\nexport class ErrorUtils {\n  /**\n   * Check if error is of a specific type\n   */\n  static isTemplateEngineError(error: any): error is TemplateEngineError {\n    return error instanceof TemplateEngineError;\n  }\n\n  /**\n   * Extract error code from any error\n   */\n  static getErrorCode(error: any): string {\n    if (ErrorUtils.isTemplateEngineError(error)) {\n      return error.code;\n    }\n    return 'UNKNOWN_ERROR';\n  }\n\n  /**\n   * Create error from unknown value\n   */\n  static fromUnknown(\n    error: unknown,\n    defaultMessage: string = 'Unknown error occurred'\n  ): TemplateEngineError {\n    if (error instanceof TemplateEngineError) {\n      return error;\n    }\n\n    if (error instanceof Error) {\n      return new TemplateEngineError(error.message, 'WRAPPED_ERROR', {\n        originalName: error.name,\n        originalStack: error.stack,\n      });\n    }\n\n    if (typeof error === 'string') {\n      return new TemplateEngineError(error, 'STRING_ERROR');\n    }\n\n    return new TemplateEngineError(defaultMessage, 'UNKNOWN_ERROR', {\n      originalValue: error,\n    });\n  }\n\n  /**\n   * Log error with appropriate level\n   */\n  static logError(\n    error: unknown,\n    logger?: { error: (msg: string) => void; debug: (msg: string) => void }\n  ): void {\n    if (!logger) return;\n\n    if (ErrorUtils.isTemplateEngineError(error)) {\n      logger.error(error.toUserMessage());\n      if (error.context) {\n        logger.debug(\n          `Error context: ${JSON.stringify(error.context, null, 2)}`\n        );\n      }\n    } else {\n      logger.error(`Unexpected error: ${error}`);\n    }\n  }\n\n  /**\n   * Check if error should cause immediate exit\n   */\n  static isFatalError(error: unknown): boolean {\n    if (error instanceof CLIError) {\n      return error.exitCode > 0;\n    }\n\n    if (error instanceof PermissionError) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Get appropriate exit code for error\n   */\n  static getExitCode(error: unknown): number {\n    if (error instanceof CLIError) {\n      return error.exitCode;\n    }\n\n    if (error instanceof PermissionError) {\n      return 126; // Permission denied\n    }\n\n    if (error instanceof FileNotFoundError) {\n      return 2; // No such file or directory\n    }\n\n    if (error instanceof ConfigError) {\n      return 78; // Configuration error\n    }\n\n    if (error instanceof ValidationError) {\n      return 65; // Data format error\n    }\n\n    return 1; // General error\n  }\n}\n\n/**\n * Common error codes used throughout the application\n */\nexport const ERROR_CODES = {\n  // General\n  UNKNOWN_ERROR: 'UNKNOWN_ERROR',\n  INTERNAL_ERROR: 'INTERNAL_ERROR',\n\n  // Configuration\n  CONFIG_NOT_FOUND: 'CONFIG_NOT_FOUND',\n  CONFIG_INVALID: 'CONFIG_INVALID',\n  CONFIG_PARSE_ERROR: 'CONFIG_PARSE_ERROR',\n\n  // File System\n  FILE_NOT_FOUND: 'FILE_NOT_FOUND',\n  FILE_READ_ERROR: 'FILE_READ_ERROR',\n  FILE_WRITE_ERROR: 'FILE_WRITE_ERROR',\n  DIRECTORY_NOT_FOUND: 'DIRECTORY_NOT_FOUND',\n\n  // Templates\n  TEMPLATE_NOT_FOUND: 'TEMPLATE_NOT_FOUND',\n  TEMPLATE_INVALID: 'TEMPLATE_INVALID',\n  TEMPLATE_PARSE_ERROR: 'TEMPLATE_PARSE_ERROR',\n  MISSING_VARIABLES: 'MISSING_VARIABLES',\n\n  // CLI\n  INVALID_COMMAND: 'INVALID_COMMAND',\n  INVALID_ARGUMENT: 'INVALID_ARGUMENT',\n  MISSING_ARGUMENT: 'MISSING_ARGUMENT',\n\n  // Validation\n  VALIDATION_FAILED: 'VALIDATION_FAILED',\n  INVALID_FORMAT: 'INVALID_FORMAT',\n\n  // Network\n  NETWORK_TIMEOUT: 'NETWORK_TIMEOUT',\n  NETWORK_UNAVAILABLE: 'NETWORK_UNAVAILABLE',\n\n  // Permissions\n  PERMISSION_DENIED: 'PERMISSION_DENIED',\n  ACCESS_DENIED: 'ACCESS_DENIED',\n} as const;\n\nexport type ErrorCode = (typeof ERROR_CODES)[keyof typeof ERROR_CODES];\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/cursor-prompt-template-engine/src/utils/logger.ts","messages":[{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'getTimestamp'.","line":54,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":54,"endColumn":23},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":94,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":94,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1943,1963],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":152,"column":40,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":152,"endColumn":42},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":153,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":153,"endColumn":41},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":154,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":154,"endColumn":41},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":155,"column":40,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":155,"endColumn":42},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":156,"column":42,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":156,"endColumn":44}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @fileoverview Logging utility for cursor-prompt-template-engine\n * @lastmodified 2025-08-22T10:30:00Z\n *\n * Features: Structured logging with levels and colors\n * Main APIs: debug(), info(), warn(), error(), success()\n * Constraints: Uses chalk for colors, respects debug flag\n * Patterns: Singleton logger with configurable levels\n */\n\nimport chalk from 'chalk';\n\n/**\n * Log levels in order of severity\n */\nexport enum LogLevel {\n  DEBUG = 0,\n  INFO = 1,\n  WARN = 2,\n  ERROR = 3,\n}\n\n/**\n * Logger configuration\n */\nexport interface LoggerConfig {\n  level: LogLevel;\n  prefix: string;\n  timestamps: boolean;\n  colors: boolean;\n}\n\n/**\n * Singleton logger class\n */\nclass Logger {\n  private config: LoggerConfig = {\n    level: LogLevel.INFO,\n    prefix: '[cursor-prompt]',\n    timestamps: true,\n    colors: true,\n  };\n\n  /**\n   * Configure the logger\n   */\n  configure(config: Partial<LoggerConfig>): void {\n    this.config = { ...this.config, ...config };\n  }\n\n  /**\n   * Get current timestamp string\n   */\n  private getTimestamp(): string {\n    return new Date().toISOString();\n  }\n\n  /**\n   * Format log message with prefix and timestamp\n   */\n  private formatMessage(level: string, message: string): string {\n    const parts = [this.config.prefix];\n\n    if (this.config.timestamps) {\n      parts.push(`[${this.getTimestamp()}]`);\n    }\n\n    parts.push(`[${level}]`, message);\n    return parts.join(' ');\n  }\n\n  /**\n   * Log a message if it meets the current log level\n   */\n  private log(\n    level: LogLevel,\n    levelName: string,\n    message: string,\n    colorFn?: (str: string) => string\n  ): void {\n    if (level < this.config.level) {\n      return;\n    }\n\n    const formattedMessage = this.formatMessage(levelName, message);\n    const output =\n      this.config.colors && colorFn\n        ? colorFn(formattedMessage)\n        : formattedMessage;\n\n    if (level >= LogLevel.ERROR) {\n      console.error(output);\n    } else {\n      console.log(output);\n    }\n  }\n\n  /**\n   * Log debug message\n   */\n  debug(message: string): void {\n    this.log(LogLevel.DEBUG, 'DEBUG', message, chalk.gray);\n  }\n\n  /**\n   * Log info message\n   */\n  info(message: string): void {\n    this.log(LogLevel.INFO, 'INFO', message, chalk.cyan);\n  }\n\n  /**\n   * Log warning message\n   */\n  warn(message: string): void {\n    this.log(LogLevel.WARN, 'WARN', message, chalk.yellow);\n  }\n\n  /**\n   * Log error message\n   */\n  error(message: string): void {\n    this.log(LogLevel.ERROR, 'ERROR', message, chalk.red);\n  }\n\n  /**\n   * Log success message\n   */\n  success(message: string): void {\n    this.log(LogLevel.INFO, 'SUCCESS', message, chalk.green);\n  }\n\n  /**\n   * Enable debug mode\n   */\n  enableDebug(): void {\n    this.config.level = LogLevel.DEBUG;\n  }\n\n  /**\n   * Disable colors\n   */\n  disableColors(): void {\n    this.config.colors = false;\n  }\n}\n\n// Export singleton instance\nexport const logger = new Logger();\n\n// Export convenience functions bound to logger instance\nexport const debug = (message: string) => logger.debug(message);\nexport const info = (message: string) => logger.info(message);\nexport const warn = (message: string) => logger.warn(message);\nexport const error = (message: string) => logger.error(message);\nexport const success = (message: string) => logger.success(message);\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/cursor-prompt-template-engine/tests/commands/generate.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1521,1524],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1521,1524],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1619,1622],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1619,1622],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":51,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":51,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1701,1768],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2256,2259],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2256,2259],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2417,2420],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2417,2420],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":78,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":78,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2499,2566],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2956,2959],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2956,2959],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3120,3123],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3120,3123],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":100,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":100,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3202,3269],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3705,3708],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3705,3708],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":125,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3867,3870],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3867,3870],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":127,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":127,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3920,3988],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":139,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4288,4291],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4288,4291],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4515,4518],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4515,4518],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":148,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":148,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4597,4664],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'_options' is defined but never used.","line":177,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":177,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":177,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5347,5350],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5347,5350],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":179,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":179,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5394,5440],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @fileoverview Tests for generate/create command functionality\n * @lastmodified 2025-08-22T15:30:00Z\n *\n * Features: Tests template generation and creation workflows\n * Main APIs: create command with template naming and options\n * Constraints: Requires valid template names and descriptions\n * Patterns: Command testing with parameter validation\n */\n\nimport { Command } from 'commander';\n\ndescribe('Generate/Create Command', () => {\n  let testProgram: Command;\n  let mockConsoleLog: jest.SpyInstance;\n\n  beforeEach(() => {\n    testProgram = new Command();\n    mockConsoleLog = jest.spyOn(console, 'log').mockImplementation();\n  });\n\n  afterEach(() => {\n    mockConsoleLog.mockRestore();\n  });\n\n  it('should register create command with correct options', () => {\n    const createCommand = testProgram\n      .command('create <name>')\n      .description('create a new prompt template')\n      .option('-t, --type <type>', 'template type', 'default')\n      .option('-d, --description <desc>', 'template description');\n\n    expect(createCommand.name()).toBe('create');\n    expect(createCommand.description()).toBe('create a new prompt template');\n    expect(createCommand.options).toHaveLength(2);\n\n    const optionFlags = createCommand.options.map(opt => opt.flags);\n    expect(optionFlags).toContain('-t, --type <type>');\n    expect(optionFlags).toContain('-d, --description <desc>');\n  });\n\n  it('should require template name argument', async () => {\n    let capturedName: string | undefined;\n    let capturedOptions: any;\n\n    testProgram\n      .command('create <name>')\n      .action(async (name: string, options: any) => {\n        capturedName = name;\n        capturedOptions = options;\n        console.log('Create called with name:', name, 'options:', options);\n      });\n\n    await testProgram.parseAsync(['node', 'test', 'create', 'my-template'], {\n      from: 'node',\n    });\n\n    expect(capturedName).toBe('my-template');\n    expect(capturedOptions).toBeDefined();\n    expect(mockConsoleLog).toHaveBeenCalledWith(\n      'Create called with name:',\n      'my-template',\n      'options:',\n      {}\n    );\n  });\n\n  it('should handle create command with type option', async () => {\n    let capturedName: string | undefined;\n    let capturedOptions: any;\n\n    testProgram\n      .command('create <name>')\n      .option('-t, --type <type>', 'template type', 'default')\n      .action(async (name: string, options: any) => {\n        capturedName = name;\n        capturedOptions = options;\n        console.log('Create called with name:', name, 'options:', options);\n      });\n\n    await testProgram.parseAsync(\n      ['node', 'test', 'create', 'my-template', '--type', 'custom'],\n      { from: 'node' }\n    );\n\n    expect(capturedName).toBe('my-template');\n    expect(capturedOptions.type).toBe('custom');\n  });\n\n  it('should handle create command with description option', async () => {\n    let capturedName: string | undefined;\n    let capturedOptions: any;\n\n    testProgram\n      .command('create <name>')\n      .option('-d, --description <desc>', 'template description')\n      .action(async (name: string, options: any) => {\n        capturedName = name;\n        capturedOptions = options;\n        console.log('Create called with name:', name, 'options:', options);\n      });\n\n    await testProgram.parseAsync(\n      [\n        'node',\n        'test',\n        'create',\n        'my-template',\n        '--description',\n        'A test template',\n      ],\n      { from: 'node' }\n    );\n\n    expect(capturedName).toBe('my-template');\n    expect(capturedOptions.description).toBe('A test template');\n  });\n\n  it('should use default template type when not specified', async () => {\n    let capturedOptions: any;\n\n    testProgram\n      .command('create <name>')\n      .option('-t, --type <type>', 'template type', 'default')\n      .action(async (_name: string, options: any) => {\n        capturedOptions = options;\n        console.log('Create called with name:', _name, 'options:', options);\n      });\n\n    await testProgram.parseAsync(['node', 'test', 'create', 'my-template'], {\n      from: 'node',\n    });\n\n    expect(capturedOptions.type).toBe('default');\n  });\n\n  it('should handle all options together', async () => {\n    let capturedName: string | undefined;\n    let capturedOptions: any;\n\n    testProgram\n      .command('create <name>')\n      .option('-t, --type <type>', 'template type', 'default')\n      .option('-d, --description <desc>', 'template description')\n      .action(async (name: string, options: any) => {\n        capturedName = name;\n        capturedOptions = options;\n        console.log('Create called with name:', name, 'options:', options);\n      });\n\n    await testProgram.parseAsync(\n      [\n        'node',\n        'test',\n        'create',\n        'my-template',\n        '--type',\n        'advanced',\n        '--description',\n        'An advanced template for testing',\n      ],\n      { from: 'node' }\n    );\n\n    expect(capturedName).toBe('my-template');\n    expect(capturedOptions.type).toBe('advanced');\n    expect(capturedOptions.description).toBe(\n      'An advanced template for testing'\n    );\n  });\n\n  it('should handle template names with special characters', async () => {\n    let capturedName: string | undefined;\n\n    testProgram\n      .command('create <name>')\n      .action(async (name: string, _options: any) => {\n        capturedName = name;\n        console.log('Create called with name:', name);\n      });\n\n    await testProgram.parseAsync(\n      ['node', 'test', 'create', 'my-special-template_v2'],\n      { from: 'node' }\n    );\n\n    expect(capturedName).toBe('my-special-template_v2');\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/cursor-prompt-template-engine/tests/commands/init.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1486,1489],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1486,1489],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":46,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":46,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1502,1552],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":62,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1970,1973],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1970,1973],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":63,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":63,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1988,2038],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2499,2502],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2499,2502],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":81,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":81,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2517,2567],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3031,3034],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3031,3034],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":99,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":99,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3049,3099],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":114,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3565,3568],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3565,3568],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":115,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":115,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3583,3633],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @fileoverview Tests for init command functionality\n * @lastmodified 2025-08-22T15:30:00Z\n *\n * Features: Tests initialization of new prompt template projects\n * Main APIs: init command with options\n * Constraints: Requires valid project structure and template types\n * Patterns: Command testing with mocked file operations\n */\n\nimport { Command } from 'commander';\n\ndescribe('Init Command', () => {\n  let testProgram: Command;\n  let mockConsoleLog: jest.SpyInstance;\n\n  beforeEach(() => {\n    testProgram = new Command();\n    mockConsoleLog = jest.spyOn(console, 'log').mockImplementation();\n  });\n\n  afterEach(() => {\n    mockConsoleLog.mockRestore();\n  });\n\n  it('should register init command with correct options', () => {\n    const initCommand = testProgram\n      .command('init')\n      .description('initialize a new prompt template project')\n      .option('-n, --name <name>', 'project name')\n      .option('-t, --template <template>', 'template type', 'basic');\n\n    expect(initCommand.name()).toBe('init');\n    expect(initCommand.description()).toBe(\n      'initialize a new prompt template project'\n    );\n    expect(initCommand.options).toHaveLength(2);\n\n    const optionFlags = initCommand.options.map(opt => opt.flags);\n    expect(optionFlags).toContain('-n, --name <name>');\n    expect(optionFlags).toContain('-t, --template <template>');\n  });\n\n  it('should handle init command without options', async () => {\n    testProgram.command('init').action(async (options: any) => {\n      console.log('Init called with options:', options);\n    });\n\n    // Parse command line arguments\n    await testProgram.parseAsync(['node', 'test', 'init'], { from: 'node' });\n\n    expect(mockConsoleLog).toHaveBeenCalledWith(\n      'Init called with options:',\n      {}\n    );\n  });\n\n  it('should handle init command with name option', async () => {\n    testProgram\n      .command('init')\n      .option('-n, --name <name>', 'project name')\n      .action(async (options: any) => {\n        console.log('Init called with options:', options);\n      });\n\n    await testProgram.parseAsync(\n      ['node', 'test', 'init', '--name', 'my-project'],\n      { from: 'node' }\n    );\n\n    expect(mockConsoleLog).toHaveBeenCalledWith('Init called with options:', {\n      name: 'my-project',\n    });\n  });\n\n  it('should handle init command with template option', async () => {\n    testProgram\n      .command('init')\n      .option('-t, --template <template>', 'template type', 'basic')\n      .action(async (options: any) => {\n        console.log('Init called with options:', options);\n      });\n\n    await testProgram.parseAsync(\n      ['node', 'test', 'init', '--template', 'advanced'],\n      { from: 'node' }\n    );\n\n    expect(mockConsoleLog).toHaveBeenCalledWith('Init called with options:', {\n      template: 'advanced',\n    });\n  });\n\n  it('should use default template when not specified', async () => {\n    testProgram\n      .command('init')\n      .option('-t, --template <template>', 'template type', 'basic')\n      .action(async (options: any) => {\n        console.log('Init called with options:', options);\n      });\n\n    await testProgram.parseAsync(['node', 'test', 'init'], { from: 'node' });\n\n    expect(mockConsoleLog).toHaveBeenCalledWith('Init called with options:', {\n      template: 'basic',\n    });\n  });\n\n  it('should handle both name and template options', async () => {\n    testProgram\n      .command('init')\n      .option('-n, --name <name>', 'project name')\n      .option('-t, --template <template>', 'template type', 'basic')\n      .action(async (options: any) => {\n        console.log('Init called with options:', options);\n      });\n\n    await testProgram.parseAsync(\n      [\n        'node',\n        'test',\n        'init',\n        '--name',\n        'test-project',\n        '--template',\n        'custom',\n      ],\n      { from: 'node' }\n    );\n\n    expect(mockConsoleLog).toHaveBeenCalledWith('Init called with options:', {\n      name: 'test-project',\n      template: 'custom',\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/cursor-prompt-template-engine/tests/index.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":152,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4759,4762],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4759,4762],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":197,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6094,6097],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6094,6097],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":199,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":199,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6135,6138],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6135,6138],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @fileoverview Tests for main CLI entry point\n * @lastmodified 2025-08-22T15:30:00Z\n *\n * Features: Tests CLI program configuration and command structure\n * Main APIs: program setup, command registration, option handling\n * Constraints: Uses commander.js for CLI structure\n * Patterns: Command testing with mocked console and file operations\n */\n\n// Mock chalk and fs before importing\nimport { Command } from 'commander';\nimport { program, main } from '../src/index';\n\njest.mock('chalk', () => ({\n  __esModule: true,\n  default: {\n    red: jest.fn((str: string) => str),\n    green: jest.fn((str: string) => str),\n    blue: jest.fn((str: string) => str),\n    yellow: jest.fn((str: string) => str),\n    cyan: jest.fn((str: string) => str),\n    gray: jest.fn((str: string) => str),\n  },\n}));\n\njest.mock('fs', () => ({\n  readFileSync: jest.fn(() => '{\"name\":\"cursor-prompt\",\"version\":\"0.1.0\"}'),\n}));\n\njest.mock('path', () => ({\n  join: jest.fn((...args: string[]) => args.join('/')),\n}));\n\n// Mock console methods to prevent output during testing\nconst mockConsoleLog = jest.fn();\nconst mockConsoleError = jest.fn();\n\nbeforeAll(() => {\n  jest.spyOn(console, 'log').mockImplementation(mockConsoleLog);\n  jest.spyOn(console, 'error').mockImplementation(mockConsoleError);\n});\n\nafterAll(() => {\n  jest.restoreAllMocks();\n});\n\nbeforeEach(() => {\n  mockConsoleLog.mockClear();\n  mockConsoleError.mockClear();\n});\n\ndescribe('CLI Program', () => {\n  let testProgram: Command;\n\n  beforeEach(() => {\n    testProgram = new Command();\n  });\n\n  it('should create a program instance', () => {\n    expect(testProgram).toBeDefined();\n    expect(testProgram).toBeInstanceOf(Command);\n  });\n\n  it('should configure basic program properties', () => {\n    testProgram\n      .name('cursor-prompt')\n      .description(\n        'TypeScript CLI tool for automated prompt template management in Cursor IDE'\n      )\n      .version('0.1.0');\n\n    expect(testProgram.name()).toBe('cursor-prompt');\n    expect(testProgram.description()).toContain('TypeScript CLI tool');\n    expect(testProgram.version()).toBe('0.1.0');\n  });\n\n  it('should support required commands', () => {\n    // Add commands separately to avoid chaining issues\n    testProgram.command('init');\n    testProgram.command('create <name>');\n    testProgram.command('list');\n    testProgram.command('apply <template>');\n    testProgram.command('validate <path>');\n    testProgram.command('config');\n\n    expect(testProgram.commands).toHaveLength(6);\n\n    const commandNames = testProgram.commands.map(cmd => cmd.name());\n    expect(commandNames).toContain('init');\n    expect(commandNames).toContain('create');\n    expect(commandNames).toContain('list');\n    expect(commandNames).toContain('apply');\n    expect(commandNames).toContain('validate');\n    expect(commandNames).toContain('config');\n  });\n\n  it('should handle global options', () => {\n    testProgram\n      .option('-d, --debug', 'enable debug mode', false)\n      .option('--config <path>', 'path to config file')\n      .option('--dry-run', 'show what would be done without executing', false);\n\n    const { options } = testProgram;\n    expect(options).toHaveLength(3);\n\n    const optionFlags = options.map(opt => opt.flags);\n    expect(optionFlags).toContain('-d, --debug');\n    expect(optionFlags).toContain('--config <path>');\n    expect(optionFlags).toContain('--dry-run');\n  });\n\n  it('should have list command with aliases', () => {\n    const listCommand = testProgram.command('list').aliases(['ls']);\n\n    expect(listCommand.name()).toBe('list');\n    expect(listCommand.aliases()).toContain('ls');\n  });\n});\n\ndescribe('Exported Program', () => {\n  it('should export a configured program instance', () => {\n    expect(program).toBeDefined();\n    expect(program).toBeInstanceOf(Command);\n    expect(program.name()).toBe('cursor-prompt');\n  });\n\n  it('should have all required commands configured', () => {\n    const commandNames = program.commands.map(cmd => cmd.name());\n    expect(commandNames).toContain('init');\n    expect(commandNames).toContain('create');\n    expect(commandNames).toContain('list');\n    expect(commandNames).toContain('apply');\n    expect(commandNames).toContain('validate');\n    expect(commandNames).toContain('config');\n  });\n\n  it('should have global options configured', () => {\n    const optionFlags = program.options.map(opt => opt.flags);\n    expect(optionFlags).toContain('-d, --debug');\n    expect(optionFlags).toContain('--config <path>');\n    expect(optionFlags).toContain('--dry-run');\n  });\n});\n\ndescribe('Main Function', () => {\n  const originalArgv = process.argv;\n  const originalExit = process.exit;\n\n  beforeEach(() => {\n    // Mock process.exit to prevent actual exit during tests\n    process.exit = jest.fn() as any;\n  });\n\n  afterEach(() => {\n    process.argv = originalArgv;\n    process.exit = originalExit;\n  });\n\n  it('should export main function', () => {\n    expect(main).toBeDefined();\n    expect(typeof main).toBe('function');\n  });\n\n  it('should show help when no arguments provided', async () => {\n    // Mock program.outputHelp to capture help output\n    const mockOutputHelp = jest.fn();\n\n    // Set argv to have only node and script name (no command)\n    process.argv = ['node', 'cursor-prompt'];\n\n    // We can't easily test the actual main function due to module imports\n    // But we can test the logic pattern\n    if (process.argv.length <= 2) {\n      mockOutputHelp();\n    }\n\n    expect(mockOutputHelp).toHaveBeenCalled();\n  });\n});\n\ndescribe('Error Handling', () => {\n  it('should handle command validation errors gracefully', () => {\n    const testProgram = new Command();\n\n    // Configure error handling similar to the main program\n    testProgram.configureOutput({\n      writeErr: (str: string) => mockConsoleError(str),\n    });\n\n    // Test that error configuration exists (testing the behavior instead of private property)\n    expect(() => testProgram.configureOutput({})).not.toThrow();\n  });\n\n  it('should handle exit override for help and version', () => {\n    const testProgram = new Command();\n    let capturedError: any;\n\n    testProgram.exitOverride((err: any) => {\n      capturedError = err;\n      if (err.code === 'commander.help' || err.code === 'commander.version') {\n        return; // Don't actually exit\n      }\n      throw err;\n    });\n\n    // Test that exitOverride is configured\n    expect(capturedError).toBeUndefined(); // No error yet\n\n    // The actual error handling would be tested in integration tests\n    // For unit tests, we just verify the configuration doesn't throw\n    expect(() => testProgram.exitOverride(() => {})).not.toThrow();\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/cursor-prompt-template-engine/tests/utils/config.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/cursor-prompt-template-engine/tests/utils/logger.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]}]
